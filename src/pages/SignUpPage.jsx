import React from 'react';
import { Formik } from 'formik';
import * as Yup from 'yup';
import {
  Box,
  Button,
  TextField,
  Typography,
  Container,
  Paper,
  MenuItem,
  InputLabel,
  Select,
  FormControl,
  Checkbox,
  ListItemText,
  OutlinedInput,
} from '@mui/material';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

// –°—Ö–µ–º–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
const SignUpSchema = Yup.object().shape({
  username: Yup.string().required('–¶–µ –ø–æ–ª–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–µ'),
  password: Yup.string().required('–¶–µ –ø–æ–ª–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–µ'),
  gender: Yup.string().required('–¶–µ –ø–æ–ª–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–µ'),
  age: Yup.number().required('–¶–µ –ø–æ–ª–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–µ').min(0, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫'),
  genres: Yup.array().min(1, '–û–±–µ—Ä–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∂–∞–Ω—Ä'),
});

const allGenres = [
  'Action',
  'Comedy',
  'Drama',
  'Horror',
  'Romance',
  'Sci-Fi',
  'Thriller',
];

export default function SignUpPage() {
  const navigate = useNavigate();

  return (
    <Container maxWidth="sm">
      <Paper elevation={3} sx={{ padding: 4, marginTop: 8 }}>
        <Typography variant="h4" component="h1" align="center" gutterBottom>
          –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è üë§
        </Typography>

        <Formik
          initialValues={{
            username: '',
            password: '',
            gender: '',
            age: '',
            genres: [],
            language: 'en',
          }}
          validationSchema={SignUpSchema}
          onSubmit={async (values, { setSubmitting, setErrors }) => {
            try {
              const response = await axios.post(
                'http://127.0.0.1:5000/signup',
                values
              );
              console.log('‚úÖ –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:', response.data);

              // –Ø–∫—â–æ –±–µ–∫–µ–Ω–¥ –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–æ–∫–µ–Ω –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è signup:
              const token = response.data.token;
              localStorage.setItem('token', token); // –∞–±–æ context, —è–∫—â–æ —î

              // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ AnalyzerPage
              navigate('/analyzer');
            } catch (error) {
              console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
              setErrors({
                username:
                  '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–º–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î)',
              });
            } finally {
              setSubmitting(false);
            }
          }}
        >
          {({
            values,
            errors,
            touched,
            handleChange,
            handleBlur,
            handleSubmit,
            isSubmitting,
          }) => (
            <form onSubmit={handleSubmit}>
              <Box mb={3}>
                <TextField
                  fullWidth
                  id="username"
                  name="username"
                  label="–Ü–º º—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
                  value={values.username}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  error={touched.username && Boolean(errors.username)}
                  helperText={touched.username && errors.username}
                />
              </Box>

              <Box mb={3}>
                <TextField
                  fullWidth
                  id="password"
                  name="password"
                  label="–ü–∞—Ä–æ–ª—å"
                  type="password"
                  value={values.password}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  error={touched.password && Boolean(errors.password)}
                  helperText={touched.password && errors.password}
                />
              </Box>

              <Box mb={3}>
                <FormControl fullWidth>
                  <InputLabel id="gender-label">–°—Ç–∞—Ç—å</InputLabel>
                  <Select
                    labelId="gender-label"
                    id="gender"
                    name="gender"
                    value={values.gender}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    error={touched.gender && Boolean(errors.gender)}
                    label="–°—Ç–∞—Ç—å"
                  >
                    <MenuItem value="male">–ß–æ–ª–æ–≤—ñ–∫</MenuItem>
                    <MenuItem value="female">–ñ—ñ–Ω–∫–∞</MenuItem>
                  </Select>
                  {touched.gender && errors.gender && (
                    <Typography variant="caption" color="error">
                      {errors.gender}
                    </Typography>
                  )}
                </FormControl>
              </Box>
              <Box mb={3}>
                <FormControl fullWidth>
                  <InputLabel id="language-label">–ú–æ–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É</InputLabel>
                  <Select
                    labelId="language-label"
                    id="language"
                    name="language"
                    value={values.language}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    label="–ú–æ–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"
                  >
                    <MenuItem value="en">English</MenuItem>
                    <MenuItem value="uk">–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</MenuItem>
                    <MenuItem value="es">Espa√±ol</MenuItem>
                    <MenuItem value="de">Deutsch</MenuItem>
                    <MenuItem value="fr">Fran√ßais</MenuItem>
                  </Select>
                </FormControl>
              </Box>
              <Box mb={3}>
                <TextField
                  fullWidth
                  id="age"
                  name="age"
                  label="–í—ñ–∫"
                  type="number"
                  value={values.age}
                  onChange={handleChange}
                  onBlur={handleBlur}
                  error={touched.age && Boolean(errors.age)}
                  helperText={touched.age && errors.age}
                />
              </Box>

              <Box mb={3}>
                <FormControl fullWidth>
                  <InputLabel id="genres-label">–£–ª—é–±–ª–µ–Ω—ñ –∂–∞–Ω—Ä–∏</InputLabel>
                  <Select
                    labelId="genres-label"
                    id="genres"
                    multiple
                    name="genres"
                    value={values.genres}
                    onChange={handleChange}
                    input={<OutlinedInput label="–£–ª—é–±–ª–µ–Ω—ñ –∂–∞–Ω—Ä–∏" />}
                    renderValue={(selected) => selected.join(', ')}
                  >
                    {allGenres.map((genre) => (
                      <MenuItem key={genre} value={genre}>
                        <Checkbox checked={values.genres.indexOf(genre) > -1} />
                        <ListItemText primary={genre} />
                      </MenuItem>
                    ))}
                  </Select>
                  {touched.genres && errors.genres && (
                    <Typography variant="caption" color="error">
                      {errors.genres}
                    </Typography>
                  )}
                </FormControl>
              </Box>

              <Button
                color="primary"
                variant="contained"
                fullWidth
                type="submit"
                disabled={isSubmitting}
              >
                {isSubmitting ? '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è...' : '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'}
              </Button>
            </form>
          )}
        </Formik>
      </Paper>
    </Container>
  );
}
